-- =========================
-- Empire at War: FoC Helper Library
-- =========================
-- Author: [Your Name]
-- Purpose: Wrapper functions for FoC Lua API with safety checks & logging
-- =========================

-- Debug print wrapper
function Log(msg)
    _OuputDebug("[FoC Script] " .. tostring(msg))
end

-- =========================
-- PLAYER & PLANET HELPERS
-- =========================

function GetPlayer(faction_name)
    local player = Find_Player(faction_name)
    if not player then
        Log("Player not found: " .. tostring(faction_name))
    end
    return player
end

function GetPlanet(planet_name)
    local planet = FindPlanet(planet_name)
    if not planet then
        Log("Planet not found: " .. tostring(planet_name))
    end
    return planet
end

-- =========================
-- SPAWNING HELPERS
-- =========================

function SpawnUnitAtPlanet(unit_type, planet_name, faction_name)
    local planet = GetPlanet(planet_name)
    local player = GetPlayer(faction_name)
    if planet and player then
        local spawned = Spawn_Unit(unit_type, planet, player)
        Log("Spawned " .. unit_type .. " at " .. planet_name .. " for " .. faction_name)
        return spawned
    end
    return nil
end

function SpawnFleetAtPlanet(unit_list, planet_name, faction_name)
    for _, unit in ipairs(unit_list) do
        SpawnUnitAtPlanet(unit, planet_name, faction_name)
    end
end

-- =========================
-- OBJECTIVES & UI
-- =========================

function AddMissionObjective(text_id, is_battle_info)
    Add_Objective(text_id, is_battle_info)
    Log("Objective added: " .. text_id)
end

function ShowGameMessage(text_id)
    Game_Message(text_id)
    Log("Game message shown: " .. text_id)
end

-- =========================
-- RADAR & MAP HELPERS
-- =========================

function AddRadarBlipToPlanet(planet_name)
    local planet = GetPlanet(planet_name)
    if planet then
        Add_Radar_Blip(planet)
        Log("Radar blip added to " .. planet_name)
    end
end

function RemoveRadarBlipFromPlanet(planet_name)
    local planet = GetPlanet(planet_name)
    if planet then
        Remove_Radar_Blip(planet)
        Log("Radar blip removed from " .. planet_name)
    end
end

-- =========================
-- ENVIRONMENT CHECKS
-- =========================

function IsInAsteroidField(obj)
    return Is_Point_In_Asteroid_Field(obj)
end

function IsInNebula(obj)
    return Is_Point_In_Nebula(obj)
end

function IsInIonStorm(obj)
    return Is_Point_In_Ion_Storm(obj)
end

-- =========================
-- CAMERA & CINEMATICS
-- =========================

function StartCinematicRetreat(player_id, delay)
    Start_Cinematic_Space_Retreat(player_id, delay or 0)
    Log("Cinematic retreat started for player ID " .. tostring(player_id))
end

function StartCinematicMode()
    Start_Cinematic_Mode()
    Log("Cinematic mode started")
end

function EndCinematicMode()
    End_Cinematic_Mode()
    Log("Cinematic mode ended")
end

function SetCinematicEnvironment(state)
    Set_Cinematic_Environment(state)
    Log("Cinematic environment set to " .. tostring(state))
end

function PromoteToCinematicLayer(obj)
    if obj then
        Promote_To_Space_Cinematic_Layer(obj)
        Log("Promoted object to cinematic layer")
    end
end

function PointCameraAt(target)
    if target then
        Point_Camera_At(target)
        Log("Camera pointed at target")
    end
end

function FadeOut(time)
    Fade_Screen_Out(time or 1)
    Log("Screen fade out over " .. tostring(time or 1) .. "s")
end

function FadeIn(time)
    Fade_Screen_In(time or 1)
    Log("Screen fade in over " .. tostring(time or 1) .. "s")
end

function LetterBoxIn(time)
    Letter_Box_In(time or 1)
    Log("Letterbox in over " .. tostring(time or 1) .. "s")
end

function LetterBoxOut(time)
    Letter_Box_Out(time or 1)
    Log("Letterbox out over " .. tostring(time or 1) .. "s")
end

-- =========================
-- MEDIA & ENVIRONMENT
-- =========================

function PlayMusic(event_name)
    Play_Music(event_name)
    Log("Playing music: " .. tostring(event_name))
end

function StopAllMusic()
    Stop_All_Music()
    Log("All music stopped")
end

function PlayLightningEffect(effect, source_pos, target_pos)
    local effect_block = Play_Lightning_Effect(effect, source_pos, target_pos)
    Log("Lightning effect played: " .. tostring(effect))
    return effect_block
end

-- =========================
-- GUI HELPERS (Steam version only)
-- =========================

function SetGUIVisibility(name, visible)
    GUI_Component_Visibility(name, visible)
    Log("GUI component " .. name .. " visibility set to " .. tostring(visible))
end

function SetGUIText(name, text_id)
    GUI_Component_Text(name, text_id)
    Log("GUI component " .. name .. " text set to " .. tostring(text_id))
end

-- =========================
-- RANDOMIZATION
-- =========================

function RandInt(min, max)
    return GameRandom(min, max)
end

function RandFloat(min, max)
    if min and max then
        return GameRandom.Get_Float(min, max)
    else
        return GameRandom.Get_Float()
    end
end

-- =========================
-- MULTITHREADING
-- =========================

function StartThread(func_name, param)
    local id = Create_Thread(func_name, param)
    Log("Thread started: " .. tostring(func_name) .. " (ID " .. tostring(id) .. ")")
    return id
end

function KillThread(id)
    Thread.Kill(id)
    Log("Thread killed: " .. tostring(id))
end

function KillAllThreads()
    Thread.Kill_All()
    Log("All threads killed")
end

-- =========================
-- GLOBAL & THREAD VALUES
-- =========================

function SetGlobalValue(key, value)
    GlobalValue.Set(key, value)
    Log("Global value set: " .. tostring(key))
end

function GetGlobalValue(key)
    return GlobalValue.Get(key)
end

function SetThreadValue(key, value)
    ThreadValue.Set(key, value)
    Log("Thread value set: " .. tostring(key))
end

function GetThreadValue(key)
    return ThreadValue.Get(key)
end

function ResetThreadValue(key)
    ThreadValue.Reset(key)
    Log("Thread value reset: " .. tostring(key))
end
