-- =========================
-- Empire at War: FoC Helper Library
-- =========================
-- Author: [Your Name]
-- Purpose: Wrapper functions for FoC Lua API with safety checks & logging
-- =========================

-- Debug print wrapper
function Log(msg)
    _OuputDebug("[FoC Script] " .. tostring(msg))
end

-- =========================
-- PLAYER & PLANET HELPERS
-- =========================

function GetPlayer(faction_name)
    local player = Find_Player(faction_name)
    if not player then Log("Player not found: " .. tostring(faction_name)) end
    return player
end

function GetPlanet(planet_name)
    local planet = FindPlanet(planet_name)
    if not planet then Log("Planet not found: " .. tostring(planet_name)) end
    return planet
end

-- =========================
-- SPAWNING HELPERS
-- =========================

function SpawnUnitAtPlanet(unit_type, planet_name, faction_name)
    local planet = GetPlanet(planet_name)
    local player = GetPlayer(faction_name)
    if planet and player then
        local spawned = Spawn_Unit(unit_type, planet, player)
        Log("Spawned " .. unit_type .. " at " .. planet_name .. " for " .. faction_name)
        return spawned
    end
    return nil
end

function SpawnFleetAtPlanet(unit_list, planet_name, faction_name)
    for _, unit in ipairs(unit_list) do
        SpawnUnitAtPlanet(unit, planet_name, faction_name)
    end
end

-- =========================
-- OBJECTIVES & UI
-- =========================

function AddMissionObjective(text_id, is_battle_info)
    Add_Objective(text_id, is_battle_info)
    Log("Objective added: " .. text_id)
end

function ShowGameMessage(text_id)
    Game_Message(text_id)
    Log("Game message shown: " .. text_id)
end

-- =========================
-- RADAR & MAP HELPERS
-- =========================

function AddRadarBlipToPlanet(planet_name)
    local planet = GetPlanet(planet_name)
    if planet then Add_Radar_Blip(planet) end
end

function RemoveRadarBlipFromPlanet(planet_name)
    local planet = GetPlanet(planet_name)
    if planet then Remove_Radar_Blip(planet) end
end

-- =========================
-- ENVIRONMENT CHECKS
-- =========================

function IsInAsteroidField(obj) return Is_Point_In_Asteroid_Field(obj) end
function IsInNebula(obj) return Is_Point_In_Nebula(obj) end
function IsInIonStorm(obj) return Is_Point_In_Ion_Storm(obj) end

-- =========================
-- CAMERA & CINEMATICS
-- =========================

function StartCinematicRetreat(player_id, delay)
    Start_Cinematic_Space_Retreat(player_id, delay or 0)
    Log("Cinematic retreat started for player ID " .. tostring(player_id))
end

function StartCinematicMode() Start_Cinematic_Mode() end
function EndCinematicMode() End_Cinematic_Mode() end
function SetCinematicEnvironment(state) Set_Cinematic_Environment(state) end
function PromoteToCinematicLayer(obj) if obj then Promote_To_Space_Cinematic_Layer(obj) end
function PointCameraAt(target) if target then Point_Camera_At(target) end
function FadeOut(time) Fade_Screen_Out(time or 1) end
function FadeIn(time) Fade_Screen_In(time or 1) end
function LetterBoxIn(time) Letter_Box_In(time or 1) end
function LetterBoxOut(time) Letter_Box_Out(time or 1) end

-- =========================
-- MEDIA & ENVIRONMENT
-- =========================

function PlayMusic(event_name) Play_Music(event_name) end
function StopAllMusic() Stop_All_Music() end
function PlayLightningEffect(effect, source_pos, target_pos)
    return Play_Lightning_Effect(effect, source_pos, target_pos)
end

-- =========================
-- GUI HELPERS (Steam version only)
-- =========================

function SetGUIVisibility(name, visible) GUI_Component_Visibility(name, visible) end
function SetGUIText(name, text_id) GUI_Component_Text(name, text_id) end

-- =========================
-- RANDOMIZATION
-- =========================

function RandInt(min, max) return GameRandom(min, max) end
function RandFloat(min, max)
    if min and max then return GameRandom.Get_Float(min, max)
    else return GameRandom.Get_Float() end
end

-- =========================
-- MULTITHREADING
-- =========================

function StartThread(func_name, param)
    local id = Create_Thread(func_name, param)
    Log("Thread started: " .. tostring(func_name) .. " (ID " .. tostring(id) .. ")")
    return id
end

function KillThread(id) Thread.Kill(id) end
function KillAllThreads() Thread.Kill_All() end

-- =========================
-- GLOBAL & THREAD VALUES
-- =========================

function SetGlobalValue(key, value) GlobalValue.Set(key, value) end
function GetGlobalValue(key) return GlobalValue.Get(key) end
function SetThreadValue(key, value) ThreadValue.Set(key, value) end
function GetThreadValue(key) return ThreadValue.Get(key) end
function ResetThreadValue(key) ThreadValue.Reset(key) end

-- =========================
-- DISCRETE DISTRIBUTIONS
-- =========================

function CreateDistribution() return DiscreteDistribution.Create() end
function DistributionInsert(dist, element, weight) dist:Insert(element, weight) end
function DistributionSample(dist) return dist:Sample() end

-- =========================
-- WEIGHTED TYPE LISTS
-- =========================

function CreateWeightedTypeList() return WeightedTypeList.Create() end
function ParseWeightedTypeList(wtl, types, weights) wtl:Parse(types, weights) end
function EvaluateTypes(player, target, wtl) return EvaluateTypeList(player, target, wtl) end

-- =========================
-- FOG OF WAR
-- =========================

function RevealAllFoW(player) FogOfWar.Reveal_All(player) end
function RevealFoW(player, pos, radius) return FogOfWar.Reveal(player, pos, radius) end
function TempRevealFoW(player, obj, radius) FogOfWar.Temporary_Reveal(player, obj, radius) end
function DisableFoWRendering(state) FogOfWar.Disable_Rendering(state) end
function UndoFoWReveal(fow_cells) fow_cells:Undo_Reveal() end

-- =========================
-- STORY / XML EVENTS
-- =========================

function TriggerStoryEvent(event_name, obj) Story_Event(event_name, obj) end
function CheckStoryFlag(player, flag, obj, reset) return Check_Story_Flag(player, flag, obj, reset) end
function GetStoryPlot(file) return Get_Story_Plot(file) end
function GetStoryEvent(plot, event_name) return plot:Get_Event(event_name) end

-- =========================
-- POSITION WRAPPER
-- =========================

function GetXYZ(pos) return pos:Get_XYZ() end

-- =========================
-- GAME OBJECT WRAPPER HELPERS
-- =========================
-- (New batch you just sent)

function IsGoodAgainst(obj, target) return obj:Is_Good_Against(target) end
function IsInGarrison(obj) return obj:Is_In_Garrison() end
function GetGarrisonedUnits(obj) return obj:Get_Garrisoned_Units() end
function HasGarrison(obj) return obj:Has_Garrison() end
function EjectGarrison(obj) obj:Eject_Garrison() end
function LeaveGarrison(obj) obj:Leave_Garrison() end
function CanGarrisonFire(obj) return obj:Can_Garrison_Fire() end
function CanGarrison(obj, target) return obj:Can_Garrison(target) end
function Garrison(obj, target) obj:Garrison(target) end
function GetAttackTarget(obj) return obj:Get_Attack_Target() end
function CanLandOnPlanet(obj, planet) return obj:Can_Land_On_Planet(planet) end
function GetIsPlanetAIUsable(obj) return obj:Get_Is_Planet_AI_Usable() end
function PlayCinematicEngineFlyby(obj) obj:Play_Cinematic_Engine_Flyby() end
function StopSFXEvent(obj, event, fade) obj:Stop_SFX_Event(event, fade) end
function AttachParticleEffect(obj, type, bone) return obj:Attach_Particle_Effect(type, bone) end
function HasAttackTarget(obj) return obj:Has_Attack_Target() end
function ShowEmitter(obj, emitter, state) obj:Show_Emitter(emitter, state) end
function HighlightSmall(obj, state, offset) 
    obj:Highlight_Small(state, offset) 
end

function Highlight(obj, state, offset) 
    obj:Highlight(state, offset) 
end

function ExploreArea(obj, location) 
    return obj:Explore_Area(location) 
end

function DisableCapture(obj, state) 
    obj:Disable_Capture(state) 
end

function ForceTestSpaceConflict(obj) 
    obj:Force_Test_Space_Conflict() 
end

function PlaySFXEvent(obj, event, mode) 
    obj:Play_SFX_Event(event, mode) 
end

function SetCannotBeKilled(obj, state) 
    obj:Set_Cannot_Be_Killed(state) 
end

function GetHint(obj) 
    return obj:Get_Hint() 
end

function SetGarrisonSpawn(obj, state) 
    obj:Set_Garrison_Spawn(state) 
end

function FireTacticalSuperweapon(obj) 
    obj:Fire_Tactical_Superweapon() 
end

function IsTacticalSuperweaponReady(obj) 
    return obj:Is_Tactical_Superweapon_Ready() 
end

function GetBonePosition(obj, bone) 
    return obj:Get_Bone_Position(bone) 
end

function LockBuildPadContents(obj, state) 
    obj:Lock_Build_Pad_Contents(state) 
end

function IsPlanetDestroyed(obj) 
    return obj:Is_Planet_Destroyed() 
end

function GetAffiliatedIndigenousType(obj, player) 
    return obj:Get_Affiliated_Indigenous_Type(player) 
end

function IsOnDiversion(obj) 
    return obj:Is_On_Diversion() 
end

function HasProperty(obj, property) 
    return obj:Has_Property(property) 
end

function DestroyContainedObjects(obj, percent) 
    obj:Destroy_Contained_Objects(percent) 
end

function ContainsObjectType(obj, type) 
    return obj:Contains_Object_Type(type) 
end

function GetContainedObjectCount(obj) 
    return obj:Get_Contained_Object_Count() 
end

function HasActiveOrders(obj) 
    return obj:Has_Active_Orders() 
end

function GetAIPowerVsUnit(obj, target) 
    return obj:Get_AI_Power_Vs_Unit(target) 
end

function Divert(obj, target, threat) 
    return obj:Divert(target, threat) 
end

function GetNextStarbaseType(obj) 
    return obj:Get_Next_Starbase_Type() 
end

function MarkParentModeObjectForDeath(obj) 
    obj:Mark_Parent_Mode_Object_For_Death() 
end

function SetImportance(obj, value) 
    obj:Set_Importance(value) 
end

function ServiceWrapper(obj) 
    obj:Service_Wrapper() 
end

function CancelEventObjectInRange(obj, func) 
    obj:Cancel_Event_Object_In_Range(func) 
end

function EventObjectInRange(obj, func, dist, player_or_type, player_opt)
    if player_opt then
        obj:Event_Object_In_Range(func, dist, player_or_type, player_opt)
    else
        obj:Event_Object_In_Range(func, dist, player_or_type)
    end
end

function GetFinalBlowPlayer(obj) 
    return obj:Get_Final_Blow_Player() 
end

function GetStarbaseLevel(obj) 
    return obj:Get_Starbase_Level() 
end

function GetOwner(obj) 
    return obj:Get_Owner() 
end

function Sell(obj) 
    obj:Sell() 
end

function GetBuildPadContents(obj) 
    return obj:Get_Build_Pad_Contents() 
end

function GetDistance(obj, target) 
    return obj:Get_Distance(target) 
end

function GetContainedHeroes(obj) 
    return obj:Get_Contained_Heroes() 
end

function ContainsHero(obj) 
    return obj:Contains_Hero() 
end

function FireSpecialWeapon(obj, target, player) 
    return obj:Fire_Special_Weapon(target, player) 
end

function GetRateOfDamageTaken(obj) 
    return obj:Get_Rate_Of_Damage_Taken() 
end

function GetTimeTillDead(obj) 
    return obj:Get_Time_Till_Dead() 
end

function SetTargetingStickinessTimeThreshold(obj, value) 
    obj:Set_Targeting_Stickiness_Time_Threshold(value) 
end

function SetTargetingPriorities(obj, priority_set) 
    obj:Set_Targeting_Priorities(priority_set) 
end

function SetPreferGroundOverSpace(obj, state) 
    obj:Set_Prefer_Ground_Over_Space(state) 
end

function GetGameScoringType(obj) 
    return obj:Get_Game_Scoring_Type() 
end

function IsCategory(obj, category) 
    return obj:Is_Category(category) 
end

function GetShield(obj) 
    return obj:Get_Shield() 
end

function GetEnergy(obj) 
    return obj:Get_Energy() 
end

function GetHealth(obj) 
    return obj:Get_Health() 
end

function GetHull(obj) 
    return obj:Get_Hull() 
end

function IsTransport(obj) 
    return obj:Is_Transport() 
end

function ReleaseObject(obj) 
    obj:Release() 
end

function BuildOnPad(obj, type, respect_rules) 
    return obj:Build(type, respect_rules) 
end

-- =========================
-- GAME OBJECT TYPE WRAPPER
-- =========================

function GetTypeName(type_obj) return type_obj:Get_Name() end
function GetCombatRating(type_obj) return type_obj:Get_Combat_Rating() end
function IsHeroType(type_obj) return type_obj:Is_Hero() end
function GetBuildCost(type_obj) return type_obj:Get_Build_Cost() end
function GetTechLevel(type_obj) return type_obj:Get_Tech_Level() end
function GetBaseLevel(type_obj) return type_obj:Get_Base_Level() end
function IsAffiliatedWith(type_obj, player) return type_obj:Is_Affiliated_With(player) end
function IsBuildLocked(type_obj, player) return type_obj:Is_Build_Locked(player) end
function IsObsolete(type_obj, player) return type_obj:Is_Obsolete(player) end
function GetTacticalBuildCost(type_obj) return type_obj:Get_Tactical_Build_Cost() end
function GetScoreCostCredits(type_obj) return type_obj:Get_Score_Cost_Credits() end
function GetMaxRange(type_obj) return type_obj:Get_Max_Range() end
function GetMinRange(type_obj) return type_obj:Get_Min_Range() end
function GetBribeCost(type_obj, obj) return type_obj:Get_Bribe_Cost(obj) end
function IsAffectedByMissileShield(type_obj) return type_obj:Is_Affected_By_Missile_Shield() end
function IsAffectedByLaserDefense(type_obj) return type_obj:Is_Affected_By_Laser_Defense() end

-- =========================
-- PLAYER WRAPPER
-- =========================

function EnableAdvisorHints(player, mode, state) player:Enable_Advisor_Hints(mode, state) end
function GetPlayerID(player) return player:Get_ID() end
function GetEnemyPlayer(player) return player:Get_Enemy() end
function SelectObjectForPlayer(player, obj) player:Select_Object(obj) end
function EnableAsActor(player) player:Enable_As_Actor() end
function RetreatPlayer(player) return player:Retreat() end
function GetPlayerName(player) return player:Get_Name() end
function GetFactionName(player) return player:Get_Faction_Name() end
function GetPlayerTechLevel(player) return player:Get_Tech_Level() end
function IsHumanPlayer(player) return player:Is_Human() end
function GiveRandomSliceableTech(player) return player:Give_Random_Sliceable_Tech() end
function GiveMoney(player, amount) player:Give_Money(amount) end
function MakeAlly(player, other) player:Make_Ally(other) end
function MakeEnemy(player, other) player:Make_Enemy(other) end
function GetSpaceStation(player) return player:Get_Space_Station() end
function GetTeamID(player) return player:Get_Team() end
function GetClanID(player) return player:Get_Clan_ID() end
function RemoveOrbitalBombardment(player, state) player:Remove_Orbital_Bombardment(state) end
function DisableOrbitalBombardment(player, state) player:Disable_Orbital_Bombardment(state) end
function SetSabotageTutorial(player, state) player:Set_Sabotage_Tutorial(state) end
function SetBlackMarketTutorial(player, state) player:Set_Black_Market_Tutorial(state) end
function GetDifficulty(player) return player:Get_Difficulty() end
function DisableBombingRun(player, state) player:Disable_Bombing_Run(state) end
function IsAlly(player, other) return player:Is_Ally(other) end
function IsEnemy(player, other) return player:Is_Enemy(other) end
function UnlockTech(player, type) player:Unlock_Tech(type) end
function LockTech(player, type) player:Lock_Tech(type) end
function GetCredits(player) return player:Get_Credits() end
function ReleaseCreditsForTactical(player, amount) player:Release_Credits_For_Tactical(amount) end
function SetTechLevel(player, level) 
    player:Set_Tech_Level(level) 
end
-- =========================
-- AI GLOBAL FUNCTIONS
-- =========================

function EvaluateInGalacticContext(perception, player)
    return Evaluate_In_Galactic_Context(perception, player)
end

function ApplyMarkup(player, target, value, status)
    return Apply_Markup(player, target, value, status)
end

function PurgeGoals(player)
    Purge_Goals(player)
end

function GiveDesireBonus(player, goal, target, bonus, time_limit)
    return GiveDesireBonus(player, goal, target, bonus, time_limit)
end

function EvaluatePerception(perception, player, target)
    return EvaluatePerception(perception, player, target)
end

function FindStageArea(player, target, taskforce)
    return _FindStageArea(player, target, taskforce)
end

function ProduceObject(player, type_or_name, planet)
    return _ProduceObject(player, type_or_name, planet)
end

function FindTarget(taskforce, perception, goal_flag, probability, range)
    return FindTarget(taskforce, perception, goal_flag, probability, range)
end

function FindTargetReachable(player, perception, goal_flag, reachability, probability, ai_target, range)
    return FindTarget.Reachable_Target(player, perception, goal_flag, reachability, probability, ai_target, range)
end

function FindTargetBestOf(taskforce, list, perception)
    return FindTarget.Best_Of(taskforce, list, perception)
end

-- =========================
-- AI TARGET LOCATION WRAPPER
-- =========================

function GetAITargetGameObject(ai_target)
    return ai_target:Get_Game_Object()
end

function GetAITargetDistance(ai_target, position)
    return ai_target:Get_Distance(position)
end

-- =========================
-- FREE STORE CLASS
-- =========================

function IsObjectOnFreeStore(obj)
    return FreeStore.Is_Object_On_Free_Store(obj)
end

function GetFreeStoreObjectCount()
    return FreeStore.Get_Object_Count()
end

function IsUnitSafe(obj)
    return FreeStore.Is_Unit_Safe(obj)
end

function IsUnitInTransit(obj)
    return FreeStore.Is_Unit_In_Transit(obj)
end

function MoveObjectToPlanet(obj, planet)
    FreeStore.Move_Object(obj, planet)
end

-- =========================
-- TASK FORCE CLASS
-- =========================

function GetGoalTypeName(tf) return tf:Get_Goal_Type_Name() end
function TestTargetContrast(tf, bool) return tf:Test_Target_Contrast(bool) end
function GetSelfThreatSum(tf) return tf:Get_Self_Threat_Sum() end
function GetSelfThreatMax(tf) return tf:Get_Self_Threat_Max() end
function GetUnitTable(tf) return tf:Get_Unit_Table() end
function ClearOpportunityFireSubs(tf) tf:Clear_Opportunity_Fire_Event_Subscriptions() end
function RemoveOpportunityFireSub(tf) tf:Remove_Opportunity_Fire_Event_Subscription() end
function AddOpportunityFireSub(tf) tf:Add_Opportunity_Fire_Event_Subscription() end
function SetPlanResult(tf, result) tf:Set_Plan_Result(result) end
function AreAllUnitsOnFreeStore(tf) return tf:Are_All_Units_On_Free_Store() end
function GetStage(tf) return tf:Get_Stage() end
function UnblockGoalProposal(tf) tf:Unblock_Goal_Proposal() end
function BlockGoalProposal(tf) tf:Block_Goal_Proposal() end
function CollectAllFreeUnits(tf) tf:Collect_All_Free_Units() end
function ReleaseUnit(tf, obj) tf:Release_Unit(obj) end
function WithdrawUnits(tf) tf:Withdraw_Units() end
function ReleaseForces(tf, fraction) tf:Release_Forces(fraction) end
function SetAsGoalSystemRemovable(tf, state) tf:Set_As_Goal_System_Removable(state) end
function GetForceCount(tf) return tf:Get_Force_Count() end
function ProduceForce(tf, stage, bool) return tf:Produce_Force(stage, bool) end
function FormUnits(tf) return tf:Form_Units() end
function AddForce(tf, obj) tf:Add_Force(obj) end
function GetTypeOfUnit(tf, index) return tf:Get_Type_Of_Unit(index) end
function TFLeaveGarrison(tf) tf:Leave_Garrison() end
function TFCanGarrison(tf, obj) return tf:Can_Garrison(obj) end
function TFGarrison(tf, obj) tf:Garrison(obj) end
function SetAllAbilitiesAutofire(tf) tf:Set_All_Abilities_Autofire() end
function SetSingleAbilityAutofire(tf, ability, state) tf:Set_Single_Ability_Autofire(ability, state) end
function GetAIPowerVsUnit(tf, obj) return tf:Get_AI_Power_Vs_Unit(obj) end
function SetTFStickiness(tf, value) tf:Set_Targeting_Stickiness_Time_Threshold(value) end
function SetTFTargetingPriorities(tf, set) tf:Set_Targeting_Priorities(set) end
function TFMoveTo(tf, target, threat, fields) tf:Move_To(target, threat, fields) end
function TFAttackMove(tf, target, threat, fields) tf:Attack_Move(target, threat, fields) end
function TFGuardTarget(tf, target, threat, fields) tf:Guard_Target(target, threat, fields) end
function TFAttackTarget(tf, target, threat, fields) tf:Attack_Target(target, threat, fields) end
function TFAttackTargetHardpoint(tf, target, hardpoint, threat) tf:Attack_Target(target, hardpoint, threat) end
function TFReleaseReinforcements(tf) tf:Release_Reinforcements() end
function TFGetReservedBuildPads(tf) return tf:Get_Reserved_Build_Pads() end
function TFBuildAll(tf) tf:Build_All() end
function TFReinforce(tf, pos, wait) tf:Reinforce(pos, wait) end
function TFPrepareAmbush(tf, pos, dir, num, time, bool) tf:Prepare_Ambush(pos, dir, num, time, bool) end
function TFFindClosestEnemy(tf, category, opt) return tf:Find_Closest_Enemy(category, opt) end
function TFEnableAttackPositioning(tf, state) tf:Enable_Attack_Positioning(state) end
function TFExploreArea(tf, ai_loc) tf:Explore_Area(ai_loc) end
function TFGetDistance(tf, pos) return tf:Get_Distance(pos) end
function TFFireSpecialWeapon(tf, ability, target) tf:Fire_Special_Weapon(ability, target) end
function TFBuild(tf, type, pad) tf:Build(type, pad) end
function TFActivateAbility(tf, ability, state) tf:Activate_Ability(ability, state) end
function TFFireOrbitalBombardment(tf, pos) tf:Fire_Orbital_Bombardment(pos) end
function TFBombingRun(tf, target) tf:Bombing_Run(target) end
function TFMoveToPlanet(tf, planet) tf:Move_To(planet) end
function TFActivateAbilityGC(tf) tf:Activate_Ability() end
function TFRaid(tf, planet) tf:Raid(planet) end
function TFIsRaidCapable(tf) return tf:Is_Raid_Capable() end
function TFRefitToDefinition(tf, planet, num) tf:Refit_To_Definition(planet, num) end
function TFLaunchUnits(tf) tf:Launch_Units() end
function TFLandUnits(tf) tf:Land_Units() end
function TFInvade(tf) return tf:Invade() end
function TFForceTestSpaceConflict(tf) return tf:Force_Test_Space_Conflict() end

-- =========================
-- BUDGET WRAPPER
-- =========================

function BudgetFlushCategory(cat) Budget.Flush_Category(cat) end
function BudgetFlushAll() Budget.Flush_All_Resources() end
function BudgetFlushUnallocated() Budget.Flush_Unallocated_Resources() end
function BudgetTakeFromGoal(amount, goal) Budget.Take_Resources_From_Goal(amount, goal) end
function BudgetGiveToGoal(amount, goal) Budget.Give_Resources_To_Goal(amount, goal) end
function BudgetWaitForUnallocated(amount) return Budget.Wait_For_Unallocated_Resources(amount) end
function BudgetWaitForSpendable(amount) return Budget.Wait_For_Spendable_Resources(amount) end
function BudgetAllocate(amount) Budget.Allocate_Resources(amount) end
function BudgetGetSpendable() return Budget.Get_Spendable_Resources() end
function BudgetGetUnallocated() return Budget.Get_Unallocated_Resources() end

-- =========================
-- LUA SCRIPT WRAPPER
-- =========================

function ScriptDebugShouldIssueEventAlert()
    return Script.Debug_Should_Issue_Event_Alert()
end

-- =========================
-- DEFAULT TASK FORCE EVENT HOOKS
-- =========================
-- These are stubs you can override in AI scripts

function Default_Production_Failed(tf, type) end
function Default_Unit_Destroyed() end
function Default_No_Units_Remaining() end
function Default_Original_Target_Owner_Changed(tf, old_player, new_player) end
function Default_Current_Target_Owner_Changed(...) end
function Default_Special_Weapon_Online(tf, special_weapon) end
function Default_Hardpoint_Target_In_Range(tf, unit, target) end
function Default_Hardpoint_Opportunity_Target_Acquired(...) end
function Default_Unit_Move_Finished(tf, unit) end
function Default_Unit_Ability_Finished(tf, unit) end
function Default_Unit_Diversion_Finished(tf, unit) end
function Default_Unit_Ability_Cancelled(tf, unit, ability_name) end
function Default_Unit_Ability_Ready(tf, unit, ability_name) end
function Default_Unit_No_Threat(...) end

